<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_424426_auto_lang.SetLang</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <mobile_callable>false</mobile_callable>
        <name>SetLang</name>
        <sandbox_callable>true</sandbox_callable>
        <script><![CDATA[/* global gs, GlideRecord, GlideScriptedExtensionPoint, Set */
/* eslint no-undef: "error" */
function SetLang() {
	try {
		const user = gs.getUser();
		if (user.getName() == 'guest') {
			const acceptLanguages = _getAcceptedLanguages();
			for (let i = 0, length = acceptLanguages.length; i < length; i++) {
				const isoLanguage = acceptLanguages[i];
				const choiceGr = new GlideRecord('sys_choice');
				choiceGr.addQuery('name', 'sys_user');
				choiceGr.addQuery('element', 'preferred_language');
				choiceGr.addQuery('language', isoLanguage);
				choiceGr.setLimit(1);
				choiceGr.query();
				if (choiceGr.hasNext()) {
					user.savePreference('user.language', isoLanguage);
					gs.info('setting guest preference to: ' + isoLanguage);
					break;
				}
			}
		}
	} catch (e) {
		let errorMessage = e.message();
		if (e.stack) {
			errorMessage += '\n' + e.stack;
		}

		gs.error(errorMessage);
	}
	
	return '';
	
	function _getRequestHeader (headerName) {
		const extensionPoints = new GlideScriptedExtensionPoint().getExtensions('AutoLangExt');
		if (extensionPoints.length) {
			// always use the extension point with the lowest order
			const ext = extensionPoints[0];
			ext.initialize();
			return ext.getRequestHeaderValue(headerName);
		}
		
		throw new Error('No Extension Point Implementation for "AutoLangExt"');
	}
	
	function _getAcceptedLanguages() {
		const acceptLanguage = _getRequestHeader('Accept-Language');
		if (acceptLanguage) {
			// Parsing according to Accept-Language definition:
			// https://www.rfc-editor.org/rfc/rfc9110#field.accept-language
			// da, en-gb;q=0.8, en;q=0.7
			// "I prefer Danish, but will accept British English and other types of English".
			const sortedLanguages = acceptLanguage.split(',').map(l => {
				const langWithPrio = l.split(';q=');
				const lang = langWithPrio[0].substring(0, 2);
				
				if (langWithPrio.length > 1) {
					return {
						lang: lang,
						weight: parseInt(langWithPrio[1])
					};
				} else {
					return {
						lang: lang,
						weight: 1
					};
				}
			}).sort((a, b) => b.weigth - a.weigth).map(l => l.lang);
			
			// a language can appear multiple times, we want uniques only
			return [... new Set(sortedLanguages)];
		}
		
		return [];
	}
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-08-07 11:42:33</sys_created_on>
        <sys_id>f01b30c597a03110d70ef207f053afc6</sys_id>
        <sys_mod_count>42</sys_mod_count>
        <sys_name>SetLang</sys_name>
        <sys_package display_value="Auto Login Language" source="x_424426_auto_lang">ac0bf48197203110d70ef207f053afae</sys_package>
        <sys_policy/>
        <sys_scope display_value="Auto Login Language">ac0bf48197203110d70ef207f053afae</sys_scope>
        <sys_update_name>sys_script_include_f01b30c597a03110d70ef207f053afc6</sys_update_name>
        <sys_updated_by>kr4uzi@gmail.com</sys_updated_by>
        <sys_updated_on>2025-04-07 16:58:24</sys_updated_on>
    </sys_script_include>
</record_update>
